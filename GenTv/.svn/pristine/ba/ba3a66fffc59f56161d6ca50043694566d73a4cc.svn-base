package gen.entertainments.gentv;

import java.util.HashMap;

import gen.entertainments.gentv.dataservices.ListChannelsServices;
import gen.entertainments.gentv.dataservices.ServiceHelper;
import gen.entertainments.gentv.imageloader.ImageLoader;
import gen.entertainments.gentv.utils.NameSpace;
import gen.entertainments.gentv.utils.Utils;

import org.json.JSONArray;
import org.json.JSONObject;

import android.app.Activity;
import android.os.Bundle;
import android.support.v4.app.Fragment;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.TextView;

public class FragmentListChannels extends Fragment {
	ProgressBar mProgressBar;
	Activity mActivity;
	View mainView;
	ListView mListView;
	ChannelsAdapter mAdapter;
	
	ImageLoader mImageLoader;

	HashMap<String, JSONArray> mMapCatIdToData;
	String mCurrentCatId;
	
	public static FragmentListChannels getIntance(ImageLoader imageLoader, String catId) {
		FragmentListChannels fragmentListChannels = new FragmentListChannels();
		fragmentListChannels.setData(imageLoader, catId);
		return fragmentListChannels;
	}
	
	public void setData(ImageLoader imageLoader, String catId) {
		mImageLoader = imageLoader;
		mCurrentCatId = catId;
	}
	
	@Override
	public void onAttach(Activity activity) {
		// TODO Auto-generated method stub
		super.onAttach(activity);
		mActivity = activity;
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		mainView = inflater.inflate(R.layout.fragment_list_channels, container, false);
		initUI();
		return mainView;
	}
	
	private void initUI() {
		mMapCatIdToData = new HashMap<String, JSONArray>();
		
		mListView = (ListView) mainView.findViewById(R.id.lv_channels);
		mAdapter = new ChannelsAdapter();
		mListView.setAdapter(mAdapter);
		
		new Thread(new DownloadDataRunnable(mCurrentCatId)).start();
	}
	
	public void onSelectCatId(String catId) {
		if (catId.equals(mCurrentCatId)) {
			return;
		}
		
		mCurrentCatId = catId;
		if (mMapCatIdToData.containsKey(mCurrentCatId)) {
			notifyDataSetChanged(mCurrentCatId);
		} else {
			new Thread(new DownloadDataRunnable(mCurrentCatId)).start();
		}
	}
	
	private void notifyDataSetChanged(String catId) {
		mAdapter.setCatId(catId);
		mAdapter.notifyDataSetChanged();
		mListView.smoothScrollToPosition(0);
	}
	
	class DownloadDataRunnable implements Runnable {
		String mCatId;
		
		public DownloadDataRunnable(String catId) {
			// TODO Auto-generated constructor stub
			mCatId = catId;
		}

		@Override
		public void run() {
			// TODO Auto-generated method stub
			String apiUrl = String.format(NameSpace.API_LIST_CHANNELS, NameSpace.VERSION_API_LIST_CHANNELS, mCatId);
			final JSONArray apiResponse = (JSONArray) ServiceHelper.getData(apiUrl, false);
			mActivity.runOnUiThread(new Runnable() {
				@Override
				public void run() {
					// TODO Auto-generated method stub
					if (apiResponse != null) {
						mMapCatIdToData.put(mCatId, apiResponse);
						notifyDataSetChanged(mCatId);
					} else {
						Utils.checkInternetAndToast(mActivity);
					}
				}
			});
		}
	}
	
	class ChannelsAdapter extends BaseAdapter {
		String mCatId;
		
		public void setCatId(String catId) {
			mCatId = catId;
		}
		
		@Override
		public int getCount() {
			// TODO Auto-generated method stub
			if (!mMapCatIdToData.containsKey(mCatId)) { 
				return 0;
			} else {
				return mMapCatIdToData.get(mCatId).length();
			}
		}

		@Override
		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		@Override
		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub
			ViewHolder holder;
			if (convertView == null) {
				LayoutInflater inflater = LayoutInflater.from(mActivity);
				convertView = inflater.inflate(R.layout.row_channel, null);
				holder = new ViewHolder(convertView);
				convertView.setTag(R.id.tag_holder, holder);
			} else {
				holder = (ViewHolder) convertView.getTag(R.id.tag_holder);
			}
			
			try {
				JSONObject channel = mMapCatIdToData.get(mCatId).getJSONObject(position);
				mImageLoader.displayImage(NameSpace.BASE_URL + channel.getString(ListChannelsServices.logo), holder.imgChannel, 240);
				holder.tvChannelName.setText(channel.getString(ListChannelsServices.channelname));
				holder.tvChannelDescription.setText(channel.getString(ListChannelsServices.description));
				convertView.setTag(R.id.tag_id, channel.getString(ListChannelsServices.channelid));
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
			
			return convertView;
		}
	}
	
	class ViewHolder {
		ImageView imgChannel;
		TextView tvChannelName, tvChannelDescription;
		
		public ViewHolder(View rowLayout) {
			// TODO Auto-generated constructor stub
			imgChannel = (ImageView) rowLayout.findViewById(R.id.img_channel);
			tvChannelName = (TextView) rowLayout.findViewById(R.id.tv_channel_name);
			tvChannelDescription = (TextView) rowLayout.findViewById(R.id.tv_channel_description);
		}
	}
}
