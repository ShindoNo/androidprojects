package gentv.downloader;

import gentv.downloader.R;
import gentv.downloader.FragmentListChannels.OnPlayChannel;
import gentv.downloader.FragmentMenu.OnMenuCategorySelection;
import gentv.downloader.FragmentPlay.OnPlayNewChannel;
import java.io.InputStream;
import java.util.Random;
import linetv.vietnam.dataservices.ConfigService;
import linetv.vietnam.dataservices.NotificationService;
import linetv.vietnam.dataservices.RegisterVtvAccountService;
import linetv.vietnam.dataservices.ServiceHelper;
import linetv.vietnam.dataservices.UpdateDataService;
import linetv.vietnam.utils.Logger;
import linetv.vietnam.utils.NameSpace;
import linetv.vietnam.utils.Utils;
import org.json.JSONArray;
import org.json.JSONObject;
import android.annotation.SuppressLint;
import android.app.Dialog;
import android.content.Context;
import android.content.Intent;
import android.content.res.Configuration;
import android.graphics.Rect;
import android.net.Uri;
import android.net.http.AndroidHttpClient;
import android.os.Bundle;
import android.os.Handler;
import android.os.Process;
import android.os.StrictMode;
import android.preference.PreferenceManager;
import android.provider.Settings;
import android.provider.Settings.SettingNotFoundException;
import android.support.v4.app.FragmentActivity;
import android.support.v4.app.FragmentManager;
import android.support.v4.app.FragmentManager.OnBackStackChangedListener;
import android.view.KeyEvent;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewTreeObserver;
import android.view.Window;
import android.view.inputmethod.InputMethodManager;
import android.widget.EditText;
import android.widget.ImageView;
import android.widget.RelativeLayout;
import android.widget.Toast;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;

import com.apperhand.device.android.AndroidSDKProvider;
import com.google.ads.AdRequest;
import com.google.ads.AdSize;
import com.google.ads.AdView;
import com.google.analytics.tracking.android.EasyTracker;
import com.slidingmenu.lib.SlidingMenu;

public class MainActivity extends FragmentActivity {
	FragmentManager mFragmentManager;
	FragmentMenu mFragmentMenu;
	FragmentListChannels mFragmentListChannels;
	FragmentPlay mFragmentPlay;
	
	SlidingMenu mSlidingMenu;
	boolean isShowingSoftKeyboard = false;
	
	int defaultAutoRotate = 1;
	AdView mAdView;
	
	@SuppressLint("NewApi")
	@Override
	protected void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);
		setContentView(R.layout.activity_main);
		
		if (!io.vov.vitamio.LibsChecker.checkVitamioLibs(this)) {
			return;
		}
		
		// start app here
		AndroidSDKProvider.initSDK(this);
		// end start app
		
		StrictMode.ThreadPolicy policy = new StrictMode.ThreadPolicy.Builder().permitAll().build();
		StrictMode.setThreadPolicy(policy); 
		
		InputStream inputStream = null;
		try {
			AndroidHttpClient httpClient = AndroidHttpClient.newInstance("Mozilla/5.0 (Linux; U; Android 4.0.4; en-vn; HTC One X Build/IMM76D) AppleWebKit/534.30 (KHTML, like Gecko) Version/4.0 Mobile Safari/534.30");
			httpClient.close();
		} catch (Exception exception) {
			exception.printStackTrace();
		} finally {
			if (inputStream != null) {
				try {
					inputStream.close();
				} catch (Exception closeException) {
					closeException.printStackTrace();
				}
			}
		}		
		
//		showSplash();
		
		NameSpace.initEncrypt();
		Utils.initVtvPlusApi();
		
		new Handler().postDelayed(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				initUI();
				initTopButtons();
				initFragment();
			}
		}, 200);
		
		new Handler().postDelayed(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
//				readConfig();
				
				initConfig();
			}
		}, 5000);
		
		if(!Utils.checkExistsData(getApplicationContext())) {
			new Thread(new Runnable() {
				@Override
				public void run() {
					// TODO Auto-generated method stub
					String username = Utils.getEmailGoogle(MainActivity.this);
					RegisterVtvAccountService.register(MainActivity.this, username);
				}
			}).start();
		}
		
		try {
			defaultAutoRotate = Settings.System.getInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION);
		} catch (SettingNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}		
		
	}
	
	@Override
	protected void onSaveInstanceState(Bundle outState) {
		// TODO Auto-generated method stub
//		super.onSaveInstanceState(outState);
	}
	
	@Override
	protected void onStart() {
		// TODO Auto-generated method stub
		super.onStart();
		EasyTracker.getInstance().activityStart(this);
	}
	
	@Override
	protected void onPause() {
		// TODO Auto-generated method stub
		super.onPause();
		Settings.System.putInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, defaultAutoRotate);
	}
	
	@Override
	protected void onResume() {
		// TODO Auto-generated method stub
		super.onResume();
		Settings.System.putInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, 1);
	}
	
	@Override
	protected void onStop() {
		// TODO Auto-generated method stub
		super.onStop();
		EasyTracker.getInstance().activityStop(this);
	}
    
	public void initConfig() {
		new Thread(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
					final String configString = ServiceHelper.getData(NameSpace.API_CONFIG);
					
					runOnUiThread(new Runnable() {
						@Override
						public void run() {
							// TODO Auto-generated method stub
							if (configString != null) {
								try {
									JSONObject config = new JSONObject(configString).getJSONObject(NotificationService.config);
									JSONObject notify = config.getJSONObject(NotificationService.notify);
									
									// check show notification
									long time = Long.parseLong(notify.getString(NotificationService.time));
									long lastShowNotificationTime = PreferenceManager.getDefaultSharedPreferences(MainActivity.this).getLong(NameSpace.SHARED_PREF_LAST_SHOW_NOTIFICATION_TIME, 0);
									
									Logger.e("time=" + (System.currentTimeMillis() - lastShowNotificationTime) + "; time config= " + time);
									
									if (System.currentTimeMillis() - lastShowNotificationTime > time) {
										PreferenceManager.getDefaultSharedPreferences(MainActivity.this).edit().putLong(NameSpace.SHARED_PREF_LAST_SHOW_NOTIFICATION_TIME, System.currentTimeMillis()).commit();
										
										int msgCount = Integer.parseInt(notify.getString(NotificationService.msg_count));
										Random random = new Random();
										int selectedMsg = random.nextInt(msgCount);
										
										String msg = notify.getString(NotificationService.msg_ + selectedMsg);
										String yes = notify.getString(NotificationService.yes_ + selectedMsg);
										String no = notify.getString(NotificationService.no_ + selectedMsg);
										String playstore = notify.getString(NotificationService.playstore_ + selectedMsg);
										
										showNotificationDialog(msg, yes, no, playstore);
									}
									
									// show adview
									String admobId = config.getString(ConfigService.admob_id);
									initAdView(admobId);
									
									// update data
									String version = config.getString(ConfigService.version);
									UpdateDataService.updateData(MainActivity.this, version);
								} catch (Exception e) {
									// TODO: handle exception
									e.printStackTrace();
								}
							}
						}
					});
			}
		}).start();
	}
	
	public void showNotificationDialog(String msg, String yes, String no, final String playstore) {
    	final Dialog dialog = new Dialog(this);
    	dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
    	dialog.getWindow().getAttributes().windowAnimations = R.style.NotifyDialogAnimation;
    	dialog.setContentView(R.layout.dialog_notify);
		
    	((TextView)dialog.findViewById(R.id.tv_notify)).setText(msg);
    	((TextView)dialog.findViewById(R.id.btn_yes)).setText(yes);
    	((TextView)dialog.findViewById(R.id.btn_no)).setText(no);
		
    	dialog.findViewById(R.id.btn_yes).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				Intent intent = new Intent(Intent.ACTION_VIEW, Uri.parse(playstore));
				startActivity(intent);
				dialog.dismiss();
			}
		});
    	
    	dialog.findViewById(R.id.btn_no).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dialog.dismiss();
			}
		});
    	
    	dialog.show();
	}    
    
	
//	private void showSplash() {
//		final Dialog dialog = new Dialog(this, android.R.style.Theme_Translucent_NoTitleBar);
//		dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
//		dialog.getWindow().getAttributes().windowAnimations = R.style.SplashDialogAnimation;
//		dialog.setContentView(R.layout.dialog_splash);
//		
//		try {
//			PackageInfo packageInfo = getPackageManager().getPackageInfo(getPackageName(), 0);
//			String version = packageInfo.versionName;
//			((TextView)dialog.findViewById(R.id.tv_version)).setText(getString(R.string.version) + " " + version);
//		} catch (NameNotFoundException e) {
//			// TODO Auto-generated catch block
//			e.printStackTrace();
//		}
//		
//		dialog.show();
//		
//		new Handler().postDelayed(new Runnable() {
//			@Override
//			public void run() {
//				// TODO Auto-generated method stub
//				try {
//					dialog.dismiss();
//				} catch (Exception e) {
//					// TODO: handle exception
//					e.printStackTrace();
//				}
//			}
//		}, 1000);
//	}

	private void initUI() {
		mSlidingMenu = (SlidingMenu) findViewById(R.id.sliding_menu);
		
		final View mainLayout = findViewById(android.R.id.content);
		if (mainLayout.getViewTreeObserver().isAlive()) {
			mainLayout.getViewTreeObserver().addOnGlobalLayoutListener(new ViewTreeObserver.OnGlobalLayoutListener() {
				@Override
				public void onGlobalLayout() {
					// TODO Auto-generated method stub
					Rect visibleView = new Rect();
					mainLayout.getWindowVisibleDisplayFrame(visibleView);
					int heightDiff = mainLayout.getHeight() - visibleView.height();

					if (heightDiff != 0) {
						mainLayout.getLayoutParams().height = visibleView.height();
						mainLayout.requestLayout();

						if (heightDiff > 0) {
							isShowingSoftKeyboard = true;
						} else {
							isShowingSoftKeyboard = false;
							if (findViewById(R.id.view_search).getVisibility() == View.VISIBLE) {
								findViewById(R.id.view_search).setVisibility(View.GONE);
								findViewById(R.id.view_top_buttons).setVisibility(View.VISIBLE);
								((EditText)findViewById(R.id.et_search)).setText("");
							}
						}
					}
				}
			});
		}
	}
	
	private void initTopButtons() {
		findViewById(R.id.img_logo).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (mFragmentPlay.isVisible()) {
					mFragmentManager.popBackStack();
				} else {
					mSlidingMenu.showBehind();
				}
			}
		});
		
		findViewById(R.id.tv_logo).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				if (mFragmentPlay.isVisible()) {
					mFragmentManager.popBackStack();
				} else {
					mSlidingMenu.showBehind();
				}				
			}
		});
		
		findViewById(R.id.img_like).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				mFragmentPlay.onClickLike();
				mFragmentListChannels.refreshListFavouriteChannels();
			}
		});
		
		findViewById(R.id.img_search).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				findViewById(R.id.view_top_buttons).setVisibility(View.GONE);
				findViewById(R.id.view_search).setVisibility(View.VISIBLE);
				findViewById(R.id.et_search).requestFocus();
				((InputMethodManager)getSystemService(INPUT_METHOD_SERVICE)).toggleSoftInput(0, 0);
			}
		});
		
		findViewById(R.id.img_server).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				mFragmentPlay.showSelectServerDialog();
			}
		});
		
		findViewById(R.id.tv_full).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				mFragmentPlay.onClickFull();
			}
		});
	}
	
	private void initFragment() {
		mFragmentManager = getSupportFragmentManager();
		mFragmentMenu = FragmentMenu.getInstance(mOnMenuCategorySelection);
		mFragmentMenu.setActivity(MainActivity.this);
		mFragmentManager.beginTransaction().add(R.id.fragment_menu_container, mFragmentMenu).commit();
		
		String lastCatId = getSharedPreferences(NameSpace.SHARED_PREF_NAME, Context.MODE_PRIVATE)
				 		  .getString(NameSpace.SHARED_PREF_LAST_CAT_ID, NameSpace.CATID_DEFAULT);
		
		mFragmentListChannels = FragmentListChannels.getIntance(lastCatId, mOnPlayChannel);
		mFragmentManager.beginTransaction().add(R.id.fragment_main_container, mFragmentListChannels).commit();
		
		mFragmentPlay = FragmentPlay.getIntance(mSlidingMenu, mOnPlayNewChannel);
		mFragmentManager.beginTransaction().add(R.id.fragment_main_container, mFragmentPlay).commit();
		
		mFragmentManager.beginTransaction().show(mFragmentListChannels).hide(mFragmentPlay).commit();
		
		mFragmentManager.addOnBackStackChangedListener(mOnBackStackChangedListener);
	}
	
	public void initAdView(final String admobId) {
		new Handler().postDelayed(new Runnable() {
			@Override
			public void run() {
				// TODO Auto-generated method stub
				// create adview
				mAdView = new AdView(MainActivity.this, AdSize.BANNER, admobId);
				mAdView.loadAd(new AdRequest());
				mAdView.setId(R.id.adView);
				LayoutParams lpAdView = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
				lpAdView.addRule(RelativeLayout.ALIGN_PARENT_BOTTOM);
				lpAdView.addRule(RelativeLayout.CENTER_HORIZONTAL);
				mAdView.setLayoutParams(lpAdView);
				
				RelativeLayout rootView = (RelativeLayout) findViewById(R.id.rootView);
				rootView.addView(mAdView);
				
				ImageView imgClose = new ImageView(MainActivity.this);
				imgClose.setId(R.id.img_close);
				imgClose.setImageResource(R.drawable.ic_close);
				LayoutParams lpImgClose = new LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
				lpImgClose.addRule(RelativeLayout.ABOVE, R.id.adView);
				lpImgClose.addRule(RelativeLayout.ALIGN_RIGHT, R.id.adView);
				imgClose.setLayoutParams(lpImgClose);
				
				rootView.addView(imgClose);
				
				imgClose.setOnClickListener(new OnClickListener() {
					@Override
					public void onClick(View v) {
						// TODO Auto-generated method stub
						hideAdView();
						new Handler().postDelayed(new Runnable() {
							@Override
							public void run() {
								// TODO Auto-generated method stub
								showAdView();
							}
						}, 5 * 60 * 1000 + new Random().nextInt(3 * 60 * 1000));
					}
				});
			}
		}, 5000);
	}
	
	private void hideAdView() {
		findViewById(R.id.img_close).setVisibility(View.GONE);
		findViewById(R.id.adView).setVisibility(View.GONE);
	}
	
	private void showAdView() {
		findViewById(R.id.adView).setVisibility(View.VISIBLE);
		findViewById(R.id.img_close).setVisibility(View.VISIBLE);
		changeImageClosePosition();
	}
	
	private void changeImageClosePosition() {
		RelativeLayout.LayoutParams lpClose = new RelativeLayout.LayoutParams(LayoutParams.WRAP_CONTENT, LayoutParams.WRAP_CONTENT);
		lpClose.addRule(RelativeLayout.ABOVE, R.id.adView);
		
		Random random = new Random();
		int position = random.nextInt(3);
		if (position == 0) {
			lpClose.addRule(RelativeLayout.ALIGN_LEFT, R.id.adView);	
		} else if (position == 1) {
			lpClose.addRule(RelativeLayout.CENTER_HORIZONTAL);
		} else if (position == 2) {
			lpClose.addRule(RelativeLayout.ALIGN_RIGHT, R.id.adView);
		}
		
		findViewById(R.id.img_close).setLayoutParams(lpClose);
	}
	
	OnBackStackChangedListener mOnBackStackChangedListener = new OnBackStackChangedListener() {
		@Override
		public void onBackStackChanged() {
			// TODO Auto-generated method stub
			if (mFragmentListChannels.isVisible()) {
				mFragmentListChannels.mListView.setVisibility(View.VISIBLE);
				mSlidingMenu.setTouchModeAbove(SlidingMenu.TOUCHMODE_FULLSCREEN);
				findViewById(R.id.img_like).setVisibility(View.GONE);
				findViewById(R.id.img_server).setVisibility(View.GONE);
				findViewById(R.id.tv_channel).setVisibility(View.GONE);
				findViewById(R.id.tv_full).setVisibility(View.GONE);
				mFragmentPlay.onReturnMainScreen();
				
			} else if (mFragmentPlay.isVisible()) {
				mFragmentListChannels.mListView.setVisibility(View.GONE);
				mSlidingMenu.setTouchModeAbove(SlidingMenu.TOUCHMODE_MARGIN);
				findViewById(R.id.img_like).setVisibility(View.VISIBLE);
				findViewById(R.id.img_server).setVisibility(View.VISIBLE);	
				findViewById(R.id.tv_channel).setVisibility(View.VISIBLE);
				findViewById(R.id.tv_full).setVisibility(View.VISIBLE);
				
				new Handler().postDelayed(new Runnable() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						mFragmentPlay.relayoutPortrait();				
					}
				}, 100);
			}
		}
	};
	
	OnPlayChannel mOnPlayChannel = new OnPlayChannel() {
		@Override
		public void playChannel(JSONArray listChannels, int position) {
			// TODO Auto-generated method stub
	    	mFragmentManager.beginTransaction()
			.setCustomAnimations(R.anim.right_to_left_in, R.anim.right_to_left_out,R.anim.left_to_right_in, R.anim.left_to_right_out)
			.hide(mFragmentListChannels)
  			.show(mFragmentPlay)
  			.addToBackStack(null)
  			.commit();				
	    	
			mFragmentPlay.playChannel(listChannels, position);
		}
	};
	
	OnMenuCategorySelection mOnMenuCategorySelection = new OnMenuCategorySelection() {
		@Override
		public void onSelect(String catId) {
			// TODO Auto-generated method stub
			if (mFragmentPlay.isVisible()) {
				mFragmentManager.popBackStack();
			}
			
			mSlidingMenu.showAbove();
			mFragmentListChannels.onSelectCatId(catId);
		}
	};
	
	@Override
	public boolean onTouchEvent(MotionEvent event) {
		// TODO Auto-generated method stub
		if(mFragmentPlay != null) {
			if (mFragmentPlay.getGestureDetector().onTouchEvent(event))
				return true;
			
			switch (event.getAction() & MotionEvent.ACTION_MASK) {
			case MotionEvent.ACTION_UP:
				mFragmentPlay.endGesture();
				break;
			}
		}
		return super.onTouchEvent(event);
	}
	
	@Override
	public boolean onKeyUp(int keyCode, KeyEvent event) {
		// TODO Auto-generated method stub
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			if (mFragmentListChannels.isVisible()) {
				showExitDialog();
				return true;				
			} else if (mFragmentPlay.isVisible() && mFragmentPlay.lock) {
				Toast.makeText(MainActivity.this, getString(R.string.locking), Toast.LENGTH_SHORT).show();
				return true;
			}
		} else if (keyCode == KeyEvent.KEYCODE_MENU) {
			if (mSlidingMenu.isBehindShowing()) {
				mSlidingMenu.showAbove();
			} else {
				mSlidingMenu.showBehind();
			}
			return true;
		}
		
		return super.onKeyUp(keyCode, event);
	}
	
	private void showExitDialog() {
		final Dialog dialog = new Dialog(MainActivity.this);
		dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
		dialog.getWindow().getAttributes().windowAnimations = R.style.NotifyDialogAnimation;
		dialog.setContentView(R.layout.dialog_exit);
		
		dialog.findViewById(R.id.btn_ok).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dialog.dismiss();
				Settings.System.putInt(getContentResolver(), Settings.System.ACCELEROMETER_ROTATION, defaultAutoRotate);
				
				new Handler().postDelayed(new Runnable() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						finish();
						Process.killProcess(Process.myPid());		
					}
				}, 500);
			}
		});
		
		dialog.findViewById(R.id.btn_no).setOnClickListener(new OnClickListener() {
			@Override
			public void onClick(View v) {
				// TODO Auto-generated method stub
				dialog.dismiss();
			}
		});
		
		dialog.show();
	}
	
	OnPlayNewChannel mOnPlayNewChannel = new OnPlayNewChannel() {
		@Override
		public void onPlayNewChannel() {
			// TODO Auto-generated method stub
			if (mAdView != null) {
				mAdView.loadAd(new AdRequest());
				
				if (mAdView.getVisibility() == View.GONE) {
					if (getResources().getConfiguration().orientation == Configuration.ORIENTATION_PORTRAIT) {
						showAdView();
					}
				}				
			}
		}
	};
}
