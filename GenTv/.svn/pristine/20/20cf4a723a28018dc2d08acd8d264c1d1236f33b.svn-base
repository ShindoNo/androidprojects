package gen.entertainments.gentv.adapter;

import gen.entertainments.gentv.R;
import gen.entertainments.gentv.dataservices.ListChannelsServices;
import gen.entertainments.gentv.utils.NameSpace;

import org.json.JSONArray;
import org.json.JSONObject;

import android.content.Context;
import android.graphics.Bitmap;
import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.ImageView;
import android.widget.TextView;

import com.nostra13.universalimageloader.cache.disc.naming.Md5FileNameGenerator;
import com.nostra13.universalimageloader.cache.memory.impl.WeakMemoryCache;
import com.nostra13.universalimageloader.core.DisplayImageOptions;
import com.nostra13.universalimageloader.core.ImageLoader;
import com.nostra13.universalimageloader.core.ImageLoaderConfiguration;
import com.nostra13.universalimageloader.core.assist.ImageScaleType;
import com.nostra13.universalimageloader.core.assist.QueueProcessingType;
import com.nostra13.universalimageloader.core.display.SimpleBitmapDisplayer;

public class ChannelsAdapter extends BaseAdapter {
	String mCatId;
	private JSONArray mJsonArray;
	private Context mContext;
	private ImageLoader mImageLoader;
	private DisplayImageOptions mDisplayImageOptions;
	
	public ChannelsAdapter(Context context, JSONArray jsonArray) {
		// TODO Auto-generated constructor stub
		this.mContext = context;
		this.mJsonArray = jsonArray;
		if(mImageLoader == null) {
//			 Initialize universal image loader
			ImageLoaderConfiguration config = new ImageLoaderConfiguration.Builder(context)
//				.threadPoolSize(3)
				.threadPriority(Thread.NORM_PRIORITY - 2)
				.memoryCacheSize(2 * 1024 * 1024) // 2.0 Mb
				.memoryCache(new WeakMemoryCache())
				.denyCacheImageMultipleSizesInMemory()
				.discCacheFileNameGenerator(new Md5FileNameGenerator())
//				.enableLogging() // Not necessary in common
				.tasksProcessingOrder(QueueProcessingType.FIFO)
				.build();
				com.nostra13.universalimageloader.core.ImageLoader.getInstance().init(config);
				mImageLoader = com.nostra13.universalimageloader.core.ImageLoader.getInstance();
		}
		mDisplayImageOptions = new DisplayImageOptions.Builder().displayer(new SimpleBitmapDisplayer())
				.showStubImage(R.drawable.ic_launcher)
				.cacheInMemory()
				.cacheOnDisc()
				.bitmapConfig(Bitmap.Config.RGB_565)
				.imageScaleType(ImageScaleType.IN_SAMPLE_INT)
				.build();
	}
	
	public void setCatId(String catId) {
		mCatId = catId;
	}
	
	public void setData(JSONArray jsonArray) {
		mJsonArray = jsonArray;
	}
	
	@Override
	public int getCount() {
		// TODO Auto-generated method stub
		return mJsonArray.length();
	}

	@Override
	public Object getItem(int position) {
		// TODO Auto-generated method stub
		return position;
	}

	@Override
	public long getItemId(int position) {
		// TODO Auto-generated method stub
		return position;
	}

	@Override
	public View getView(int position, View convertView, ViewGroup parent) {
		// TODO Auto-generated method stub
		ViewHolder holder;
		if (convertView == null) {
			LayoutInflater inflater = LayoutInflater.from(mContext);
			convertView = inflater.inflate(R.layout.row_channel, null);
			holder = new ViewHolder(convertView);
			convertView.setTag(R.id.tag_holder, holder);
		} else {
			holder = (ViewHolder) convertView.getTag(R.id.tag_holder);
		}
		
		try {
			JSONObject channel = mJsonArray.getJSONObject(position);
			mImageLoader.displayImage(NameSpace.BASE_URL + channel.getString(ListChannelsServices.logo), holder.imgChannel, mDisplayImageOptions);
			holder.tvChannelName.setText(channel.getString(ListChannelsServices.channelname));
			holder.tvChannelDescription.setText(channel.getString(ListChannelsServices.description));
			convertView.setTag(R.id.tag_id, channel.getString(ListChannelsServices.channelid));
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return convertView;
	}
	public static class ViewHolder {
		ImageView imgChannel;
		TextView tvChannelName, tvChannelDescription;
		
		public ViewHolder(View rowLayout) {
			// TODO Auto-generated constructor stub
			imgChannel = (ImageView) rowLayout.findViewById(R.id.img_channel);
			tvChannelName = (TextView) rowLayout.findViewById(R.id.tv_channel_name);
			tvChannelDescription = (TextView) rowLayout.findViewById(R.id.tv_channel_description);
		}
	}
}
