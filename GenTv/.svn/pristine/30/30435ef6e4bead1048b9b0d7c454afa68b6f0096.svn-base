package gen.entertainments.gentv;

import gen.entertainments.gentv.adapter.ChannelsAdapter;
import gen.entertainments.gentv.database.DatabaseDAO;
import gen.entertainments.gentv.dataservices.ListChannelsServices;
import gen.entertainments.gentv.dataservices.ServiceHelper;
import gen.entertainments.gentv.dataservices.SpecialChannelService;
import gen.entertainments.gentv.utils.Logger;
import gen.entertainments.gentv.utils.MCrypt;
import gen.entertainments.gentv.utils.NameSpace;
import gen.entertainments.gentv.utils.Utils;
import io.vov.vitamio.MediaPlayer;
import io.vov.vitamio.MediaPlayer.OnCompletionListener;
import io.vov.vitamio.MediaPlayer.OnErrorListener;
import io.vov.vitamio.MediaPlayer.OnPreparedListener;
import io.vov.vitamio.widget.MediaController;
import io.vov.vitamio.widget.MediaController.MediaControlListener;
import io.vov.vitamio.widget.VideoView;
import org.json.JSONArray;
import org.json.JSONObject;

import com.google.analytics.tracking.android.EasyTracker;
import com.google.analytics.tracking.android.Log;

import android.app.Activity;
import android.app.Dialog;
import android.content.Context;
import android.content.res.Configuration;
import android.graphics.Rect;
import android.media.AudioManager;
import android.net.Uri;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.v4.app.Fragment;
import android.view.Display;
import android.view.GestureDetector;
import android.view.GestureDetector.SimpleOnGestureListener;
import android.view.LayoutInflater;
import android.view.MotionEvent;
import android.view.View;
import android.view.ViewGroup;
import android.view.Window;
import android.view.WindowManager;
import android.widget.AdapterView;
import android.widget.AdapterView.OnItemClickListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.ListView;
import android.widget.ProgressBar;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.RadioGroup.OnCheckedChangeListener;
import android.widget.RelativeLayout;
import android.widget.RelativeLayout.LayoutParams;
import android.widget.TextView;

public class FragmentPlay extends Fragment implements OnCompletionListener, MediaControlListener, OnPreparedListener, OnErrorListener {
	Activity mActivity;
	View mainLayout;
	
	ListView mListView;
	private RelativeLayout mLayoutVideoPlayer;
	ChannelsAdapter mAdapter;
	
	JSONArray mListChannelsData;
	
	private DatabaseDAO mDatabaseDAO;
	private int mCurrentPosition;
	private int mCurrentStreamPosition;
	MCrypt mMCrypt = new MCrypt(NameSpace.IV, NameSpace.SECRET);
	
	/** Video view **/
	private String mTitle;
	private String mPath;
	private VideoView mVideoView;
	private View mVolumeBrightnessLayout;
	private ImageView mOperationBg;
	private ImageView mOperationPercent;
	private AudioManager mAudioManager;
	private TextView mTitleChannel;
	private TextView mServerError;
	private ProgressBar mProgressBarLoading;
	
	private int mMaxVolume;
	private int mVolume = -1;
	private float mBrightness = -1f;
	private int mLayout = VideoView.VIDEO_LAYOUT_ZOOM;
	private GestureDetector mGestureDetector;
	private MediaController mMediaController;
	private int mHeight = 0;
	
	
	public static FragmentPlay getIntance() {
		FragmentPlay fragmentPlay = new FragmentPlay();
		return fragmentPlay;
	}
	
	@Override
	public void onAttach(Activity activity) {
		// TODO Auto-generated method stub
		super.onAttach(activity);
		mActivity = activity;
	}
	
	@Override
	public View onCreateView(LayoutInflater inflater, ViewGroup container, Bundle savedInstanceState) {
		// TODO Auto-generated method stub
		mainLayout = inflater.inflate(R.layout.fragment_play, container, false);
		return mainLayout;
	}
	
	@Override
	public void onViewCreated(View view, Bundle savedInstanceState) {
		initUI();
		super.onViewCreated(view, savedInstanceState);
	}
	
	public void initUI() {
		if (!io.vov.vitamio.LibsChecker.checkVitamioLibs(getActivity()))
			return;
		mDatabaseDAO = new DatabaseDAO(mActivity);
		mListView = (ListView) mainLayout.findViewById(R.id.lv_channels_small);
		mAdapter = new ChannelsAdapter(mActivity);
		mAdapter.isSmallList = true;
		mListView.setAdapter(mAdapter);	
		mListView.setOnItemClickListener(mOnPlayChannel);
		mLayoutVideoPlayer = (RelativeLayout) mainLayout.findViewById(R.id.layout_video);
//		mLayoutVideoPlayer.setLayoutParams(new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT, mHeight / 2));
		//
		mVideoView = (VideoView)  mainLayout.findViewById(R.id.surface_view);
		mVolumeBrightnessLayout = mainLayout.findViewById(R.id.operation_volume_brightness);
		mOperationBg = (ImageView) mainLayout.findViewById(R.id.operation_bg);
		mOperationPercent = (ImageView) mainLayout.findViewById(R.id.operation_percent);
		mTitleChannel = (TextView) mainLayout.findViewById(R.id.mediacontroller_file_name_other);
		mServerError = (TextView) mainLayout.findViewById(R.id.operation_errortext);
		mProgressBarLoading = (ProgressBar) mainLayout.findViewById(R.id.operation_loading);
		
		mAudioManager = (AudioManager) getActivity().getSystemService(Context.AUDIO_SERVICE);
		mMaxVolume = mAudioManager.getStreamMaxVolume(AudioManager.STREAM_MUSIC);
		mVideoView.setOnCompletionListener(this);
		mVideoView.setOnPreparedListener(this);
		mVideoView.setOnErrorListener(this);
		
		mMediaController = (MediaController) mainLayout.findViewById(R.id.media_controller_custom);// new MediaController(this);
		mMediaController.setIsPlayLiveStream(true);
		mMediaController.setFileName(mTitle);
		mMediaController.setChooseServerListener(this);
		
		mVideoView.setMediaController(mMediaController);
		
		mGestureDetector = new GestureDetector(getActivity(), new MyGestureListener());
	}
	
	/**
	 * 
	 * @param state
	 * 1: hiden text and progress
	 * 0: show progress
	 * -1: hiden all text and surface, show text
	 */
	private void updateLayoutListener(int state) {
		switch (state) {
		case -1:
			mServerError.setVisibility(View.VISIBLE);
			mVideoView.setVisibility(View.GONE);
			mProgressBarLoading.setVisibility(View.GONE);
			break;
		case 0:
			mServerError.setVisibility(View.GONE);
			mVideoView.setVisibility(View.VISIBLE);
			mProgressBarLoading.setVisibility(View.VISIBLE);
			break;
		case 1:
			mServerError.setVisibility(View.GONE);
			mVideoView.setVisibility(View.VISIBLE);
			mProgressBarLoading.setVisibility(View.GONE);
			break;
			
		default:
			break;
		}
	}
	
	public void startPlayStream(String streamUrl, String channelName) {
		if(streamUrl.trim().equals(""))
			return;
		try {
//			if (mPath.startsWith("http:"))
				updateLayoutListener(0);
				mPath = streamUrl;
				mTitle = channelName;
//				mMediaController.setFileName(channelName);
				mTitleChannel.setText(channelName);
				mVideoView.setVideoURI(Uri.parse(streamUrl));
//			else
//				mVideoView.setVideoPath(mPath);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
	@Override
	public void onPause() {
		super.onPause();
		if (mVideoView != null)
			mVideoView.pause();
	}

	@Override
	public void onResume() {
		super.onResume();
		try {
			if (mVideoView != null)
				mVideoView.resume();
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	@Override
	public void onDestroy() {
		super.onDestroy();
		if (mVideoView != null) {
			mVideoView.stopPlayback();
		}
		
		if (mDatabaseDAO != null) {
			mDatabaseDAO.close();	
		}
	}
	
	protected GestureDetector getGestureDetector() {
		return this.mGestureDetector;
	}
	/*
	 * This function called from MainActivity OnPlayListener
	 */
	public void playChannel(JSONArray listChannelsData, int position) {
		mListChannelsData = listChannelsData;
		mAdapter.setData(listChannelsData);
		mAdapter.notifyDataSetChanged();
		mListView.smoothScrollToPosition(0);
		playChannel(position, 0);
	}
	
	OnItemClickListener mOnPlayChannel = new OnItemClickListener() {
		@Override
		public void onItemClick(AdapterView<?> parent, View view, int position, long id) {
			// TODO Auto-generated method stub
			playChannel(position, 0);
		}
	};
	
	/* Interface between MainActivity and FragmentPlay here */
	/* Interface between MainActivity and FragmentPlay here */
	/* Interface between MainActivity and FragmentPlay here */
	
	public void onClickLike() {
		try {
			JSONObject mChannelData = mListChannelsData.getJSONObject(mCurrentPosition);
			String channelId = mChannelData.getString(ListChannelsServices.id);
			String channelName = mChannelData.getString(ListChannelsServices.name);
			if (mDatabaseDAO.checkFavouriteChannelExist(channelId)) {
				mDatabaseDAO.deleteFavouriteChannel(channelId);
				((ImageView)mActivity.findViewById(R.id.img_like)).setImageResource(R.drawable.ic_like);
				Utils.toast(mActivity, getString(R.string.removed_from_favourite_channel));
			} else {
				mDatabaseDAO.insertFavouriteChannel(channelId, "", mChannelData.toString());
				((ImageView)mActivity.findViewById(R.id.img_like)).setImageResource(R.drawable.ic_like_yes);
				Utils.toast(mActivity, getString(R.string.added_to_favourite_channel));
				
				// Google Analytics
				String action = channelName;
				EasyTracker.getTracker().trackEvent(NameSpace.GA_CATEGORY_MOST_LIKED_CHANNELS, action, null, 1L);
			}
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	/**
	 * Stop playing when return main screen
	 */
	public void onReturnMainScreen() {
		if (mVideoView != null) {
			mVideoView.stopPlayback();
			mVideoView.setVisibility(View.GONE);
		}
	}
	
	public void hideActionBar() {
		mActivity.findViewById(R.id.mainTop).setVisibility(View.GONE);
	}
	
	public void showActionBar() {
		mActivity.findViewById(R.id.mainTop).setVisibility(View.VISIBLE);
	}
	
	/* Code for ViewdeoView here */
	/* Code for ViewdeoView here */
	/* Code for ViewdeoView here */
	
	public void showSelectServerDialog() {
		final Dialog dialog = new Dialog(mActivity);
		dialog.requestWindowFeature(Window.FEATURE_NO_TITLE);
		dialog.getWindow().getAttributes().windowAnimations = R.style.DialogAnimationPopUp;
		dialog.setContentView(R.layout.dialog_select_server);
		dialog.setCanceledOnTouchOutside(true);
		
		try {
			JSONObject currentChannelData = mListChannelsData.getJSONObject(mCurrentPosition);
			JSONArray streamData = currentChannelData.getJSONArray(ListChannelsServices.stream);
			
			RadioGroup rgSelectServer = (RadioGroup) dialog.findViewById(R.id.rg_select_server);
			for (int i = 0; i < streamData.length(); i++) {
				RadioButton rbServer = new RadioButton(mActivity);
				rgSelectServer.addView(rbServer);
				
				if (i == mCurrentStreamPosition) {
					rbServer.setChecked(true);
				}
				
				rbServer.setLayoutParams(new RadioGroup.LayoutParams(RadioGroup.LayoutParams.MATCH_PARENT, RadioGroup.LayoutParams.WRAP_CONTENT));
				rbServer.setText(getString(R.string.server) + " " + (i+1));
				rbServer.setTag(R.id.tag_position, i);
			}
			
			rgSelectServer.setOnCheckedChangeListener(new OnCheckedChangeListener() {
				@Override
				public void onCheckedChanged(RadioGroup group, int checkedId) {
					// TODO Auto-generated method stub
					int streamPosition = Integer.parseInt(group.findViewById(checkedId).getTag(R.id.tag_position).toString());
					playChannel(mCurrentPosition, streamPosition);
					dialog.dismiss();
				}
			});
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		dialog.show();
	}
	
	public void playChannel(int position, int streamPosition) {
		if (mVideoView != null) {
			mVideoView.setVisibility(View.VISIBLE);
			mVideoView.pause();
		}
		
		mCurrentPosition = position;
		mCurrentStreamPosition = streamPosition;
		try {		
	    	JSONObject channelData = mListChannelsData.optJSONObject(position);
	    	
	    	final String channelName = channelData.optString(ListChannelsServices.name, "");
	    	String channelId = channelData.getString(ListChannelsServices.id);
	    	
	    	TextView tvChannelName = (TextView) mActivity.findViewById(R.id.tv_channel);
	    	tvChannelName.setText(channelName);
	    	
	    	// Goonge Analytics
	    	String action = channelName;
	    	EasyTracker.getTracker().trackEvent(NameSpace.GA_CATEGORY_MOST_VIEWED_CHANNELS, action, null, 1L);
	    	
	    	if (mDatabaseDAO.checkFavouriteChannelExist(channelId)) {
	    		((ImageView)mActivity.findViewById(R.id.img_like)).setImageResource(R.drawable.ic_like_yes);
	    	} else {
	    		((ImageView)mActivity.findViewById(R.id.img_like)).setImageResource(R.drawable.ic_like);
	    	}
			
	    	String linkHex = channelData.getJSONArray(ListChannelsServices.stream).getJSONObject(streamPosition).getString(ListChannelsServices.link);
	    	String linkType = channelData.getJSONArray(ListChannelsServices.stream).getJSONObject(streamPosition).getString(ListChannelsServices.type);
	    	
	    	if (linkType.equals("1")) {
	    		String link = mMCrypt.decryptFromHexString(linkHex);
	    		startPlayStream(link, channelName);	
	    	} else if (linkType.equals("0")) {
	    		final String specialChannelId = mMCrypt.decryptFromHexString(linkHex);
	    		new Thread(new Runnable() {
					@Override
					public void run() {
						// TODO Auto-generated method stub
						final JSONObject linkData = (JSONObject) ServiceHelper.getData(String.format(NameSpace.API_SPECIAL_CHANNEL, specialChannelId), true);
						mActivity.runOnUiThread(new Runnable() {
							@Override
							public void run() {
								if (linkData != null) {
									try {
										String linkHex = linkData.getString(SpecialChannelService.link);
										String link = mMCrypt.decryptFromHexString(linkHex);
										startPlayStream(link, channelName);
									} catch (Exception e) { // call to onError here
										e.printStackTrace();
									}
								} else { // call to onError here
									
								}
							}
						});
					}
				}).start();
	    	}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}
	
	protected void endGesture() {
		mVolume = -1;
		mBrightness = -1f;

		mDismissHandler.removeMessages(0);
		mDismissHandler.sendEmptyMessageDelayed(0, 500);
	}
	
	private class MyGestureListener extends SimpleOnGestureListener {
		private boolean downInAreaVideoView = false;
		@Override
		public boolean onSingleTapUp(MotionEvent e) {
			if(downInAreaVideoView) 
				mVideoView.toggleControl();
			return super.onSingleTapUp(e);
		}
		
		@Override
		public boolean onDoubleTap(MotionEvent e) {
			if(downInAreaVideoView)  
				taskOnDoubleTap();
			return true;
		}
		
		@Override
		public boolean onDown(MotionEvent e) {
			Rect mRect = new Rect();
			mLayoutVideoPlayer.getHitRect(mRect);
			if(mRect.contains((int) e.getX(), (int) e.getY())) {
				downInAreaVideoView = true;
			} else {
				downInAreaVideoView = false;
			}
			return super.onDown(e);
		}
		
		@Override
		public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) {
			if(downInAreaVideoView) 
				taskSlide(e1, e2);
			return super.onScroll(e1, e2, distanceX, distanceY);
		}
		
	}
	
	public void taskOnDoubleTap() {
		if (mLayout == VideoView.VIDEO_LAYOUT_ZOOM)
			mLayout = VideoView.VIDEO_LAYOUT_ORIGIN;
		else
			mLayout++;
		if (mVideoView != null)
			mVideoView.setVideoLayout(mLayout, 0);
	}
	
	public void taskSlide(MotionEvent e1, MotionEvent e2) {
		if(e1 == null || e2 == null) {
			return ;
		}
		float mOldX = e1.getX(), mOldY = e1.getY();
		int y = (int) e2.getRawY();
		Display disp = getActivity().getWindowManager().getDefaultDisplay();
		int windowWidth = disp.getWidth();
		int windowHeight = disp.getHeight();

		if (mOldX > windowWidth * 4.0 / 5)//
			onVolumeSlide((mOldY - y) / windowHeight);
		else if (mOldX < windowWidth / 5.0)//
			onBrightnessSlide((mOldY - y) / windowHeight);
	}
	
	private Handler mDismissHandler = new Handler() {
		@Override
		public void handleMessage(Message msg) {
			mVolumeBrightnessLayout.setVisibility(View.GONE);
		}
	};

	/**
	 * 
	 * @param percent
	 */
	private void onVolumeSlide(float percent) {
		if (mVolume == -1) {
			mVolume = mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
			if (mVolume < 0)
				mVolume = 0;

			mOperationBg.setImageResource(R.drawable.video_volumn_bg);
			mVolumeBrightnessLayout.setVisibility(View.VISIBLE);
		}

		int index = (int) (percent * mMaxVolume) + mVolume;
		if (index > mMaxVolume)
			index = mMaxVolume;
		else if (index < 0)
			index = 0;

		mAudioManager.setStreamVolume(AudioManager.STREAM_MUSIC, index, 0);

		ViewGroup.LayoutParams lp = mOperationPercent.getLayoutParams();
		lp.width = mainLayout.findViewById(R.id.operation_full).getLayoutParams().width * index / mMaxVolume;
		mOperationPercent.setLayoutParams(lp);
	}

	/**
	 * 
	 * @param percent
	 */
	private void onBrightnessSlide(float percent) {
		if (mBrightness < 0) {
			mBrightness = getActivity().getWindow().getAttributes().screenBrightness;
			if (mBrightness <= 0.00f)
				mBrightness = 0.50f;
			if (mBrightness < 0.01f)
				mBrightness = 0.01f;

			mOperationBg.setImageResource(R.drawable.video_brightness_bg);
			mVolumeBrightnessLayout.setVisibility(View.VISIBLE);
		}
		WindowManager.LayoutParams lpa = getActivity().getWindow().getAttributes();
		lpa.screenBrightness = mBrightness + percent;
		if (lpa.screenBrightness > 1.0f)
			lpa.screenBrightness = 1.0f;
		else if (lpa.screenBrightness < 0.01f)
			lpa.screenBrightness = 0.01f;
		getActivity().getWindow().setAttributes(lpa);

		ViewGroup.LayoutParams lp = mOperationPercent.getLayoutParams();
		lp.width = (int) (mainLayout.findViewById(R.id.operation_full).getLayoutParams().width * lpa.screenBrightness);
		mOperationPercent.setLayoutParams(lp);
	}
	
	@Override
	public void onConfigurationChanged(Configuration newConfig) {
		int orientation = newConfig.orientation;
		if (orientation == Configuration.ORIENTATION_LANDSCAPE) {
			relayoutLandscape();
			mActivity.getWindow().addFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
		} else {
			mActivity.getWindow().clearFlags(WindowManager.LayoutParams.FLAG_FULLSCREEN);
			relayoutPoitrain();
		}
		if (mVideoView != null)
			mVideoView.setVideoLayout(mVideoView.getVideoLayout(), 0);
		super.onConfigurationChanged(newConfig);
	}
	
	@Override
	public void onCompletion(MediaPlayer arg0) {
		// TODO Khi chay xong 1 bai
		Logger.d("TEST", "onCompletion");
		//TODO set current link
//		mVideoView.release(true);
	}
	
	/**
	 * 2 function relayout
	 */
	public void relayoutLandscape() {
		if(mHeight == 0)
			mHeight = (mainLayout.getWidth() > mainLayout.getHeight()) ? mainLayout.getWidth() : mainLayout.getHeight();
		hideActionBar();
		mListView.setVisibility(View.GONE);
		LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);
		mLayoutVideoPlayer.setLayoutParams(layoutParams);
	}
	public void relayoutPoitrain() {
		if(mHeight == 0) {
			mHeight = (mainLayout.getWidth() > mainLayout.getHeight()) ? mainLayout.getWidth() : mainLayout.getHeight();
//			mHeight = mainLayout.getHeight();
			
		}
		showActionBar();
		mListView.setVisibility(View.VISIBLE);
		LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, mHeight/2);
//		mLayoutVideoPlayer.setLayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT, 10f);
		mLayoutVideoPlayer.setLayoutParams(layoutParams);
	}

	@Override
	public void startChooseServer() {
		showSelectServerDialog();
	}

	@Override
	public void onPrepared(MediaPlayer arg0) {
		// TODO Auto-generated method stub
		updateLayoutListener(1);
		Logger.d("TEST", "onPrepared");
	}

	@Override
	public boolean onError(MediaPlayer arg0, int arg1, int arg2) {
		// TODO Auto-generated method stub
		updateLayoutListener(-1);
		
		// Google Analytics
		try {
			JSONObject channelData = mListChannelsData.getJSONObject(mCurrentPosition);
			String channelName = channelData.getString(ListChannelsServices.name);
			String currentErrorStreamHex = channelData.getJSONArray(ListChannelsServices.stream).getJSONObject(mCurrentStreamPosition).getString(ListChannelsServices.link);
			String currentErrorStream = mMCrypt.decryptFromHexString(currentErrorStreamHex);
			EasyTracker.getTracker().trackEvent(NameSpace.GA_CATEGORY_ERROR_CHANNELS, channelName, currentErrorStream, 1L);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
		
		return true;
	}
}
