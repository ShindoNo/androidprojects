package vn.muachung.cod.muachungmobile;

import java.text.NumberFormat;
import java.util.HashMap;
import org.json.JSONArray;
import org.json.JSONObject;

import vn.muachung.cod.dao.NoteSortSmsDAO;
import vn.muachung.cod.muachungmobile.SearchDealHelper.SearchListener;
import vn.muachung.cod.popup.PopupDealCall;
import vn.muachung.cod.popup.PopupDealGoTo;
import vn.muachung.cod.popup.PopupDealInfo;
import vn.muachung.cod.popup.PopupDealReturn;
import vn.muachung.cod.popup.PopupDealShip;
import vn.muachung.cod.popup.PopupDealShipBack;
import vn.muachung.cod.popup.PopupDealSms;
import vn.muachung.cod.query.DataService;
import vn.muachung.cod.query.NameSpace;
import vn.muachung.cod.query.Tools;

import android.app.Activity;
import android.app.ProgressDialog;
import android.content.Context;
import android.text.Html;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewGroup;
import android.widget.BaseAdapter;
import android.widget.Button;
import android.widget.ImageView;
import android.widget.ListView;
import android.widget.PopupWindow.OnDismissListener;
import android.widget.TextView;
import android.widget.Toast;

public class WorksViewCreator {
	// system
	Context mContext;
	LayoutInflater mInflater;
	ProgressDialog mProgressDialog;
	
	// view
	ListView mlvWorks;
	WorksAdapter mWorksAdapter;

	// popup of deal
	PopupDealShip mPopupDealShip;
	PopupDealReturn mPopupDealReturn;
	PopupDealShipBack mPopupDealShipBack;
	PopupDealInfo mPopupDealInfo;
	PopupDealGoTo mPopupDealGoTo;
	PopupDealSms mPopupDealSms;
	PopupDealCall mPopupDealCall;

	// data
	HashMap<String, JSONObject> mapDateToData;
	HashMap<String, JSONObject> mapIdToSearchResult;
	HashMap<String, String> mapOrderIdToAddress;
	
	NoteSortSmsDAO noteSortSmsDAO;
	
	SearchDealHelper mSearchHelper;
	SortDealHelper mSortDealHelper;

	public WorksViewCreator(ListView lvWorks) {
		// TODO Auto-generated constructor stub
		mlvWorks = lvWorks;
		mContext = mlvWorks.getContext();
		initialize();
	}

	public void initialize() {
		// database
		noteSortSmsDAO = new NoteSortSmsDAO(mContext);
		noteSortSmsDAO.open();
		
		// init data
		mapDateToData = new HashMap<String, JSONObject>();
		mapOrderIdToAddress = new HashMap<String, String>();
		mapIdToSearchResult = new HashMap<String, JSONObject>();
		
		// init view
		mInflater = LayoutInflater.from(mContext);
		mWorksAdapter = new WorksAdapter();
		mWorksAdapter.setWorkViewDisplayMode(NameSpace.WORK_DISPLAY_DATE);
		mlvWorks.setAdapter(mWorksAdapter);

		// popup deal info
		mPopupDealInfo = new PopupDealInfo(mlvWorks);
		
		// popup deal ship
		mPopupDealShip = new PopupDealShip(mlvWorks);
		mPopupDealShip.setAdapter(mWorksAdapter); // notify adapter if ship successful
		mPopupDealShip.setShowOtherDealListener(onClickShowOtherDealButton); // find other deal of current customer
		mPopupDealShip.setDAO(noteSortSmsDAO);
		mPopupDealShip.setWorkViewCreator(this);
		mPopupDealShip.setOnDismissListener(new OnDismissListener() {
			public void onDismiss() {
				// TODO Auto-generated method stub
				mSearchHelper.isSearchingRelatedDeals = false;
			}
		});
		
		// popup deal return
		mPopupDealReturn = new PopupDealReturn(mlvWorks);
		mPopupDealReturn.setAdapter(mWorksAdapter); // notify adapter if return successful
		
		// popup deal shipback
		mPopupDealShipBack = new PopupDealShipBack(mlvWorks);
		mPopupDealShipBack.setAdapter(mWorksAdapter);
		
		// popup deal goto
		mPopupDealGoTo = new PopupDealGoTo(mlvWorks);
		mPopupDealGoTo.setListener(onClickSortBySelectPosition); // set listener of this class for popup
		
		// popup deal sms
		mPopupDealSms = new PopupDealSms(mlvWorks);
		mPopupDealSms.setDAO(noteSortSmsDAO);
		
		// popup deal call
		mPopupDealCall = new PopupDealCall(mlvWorks);
		
		SearchListener searchListener = new SearchListener() {
			public void setPopupDealShipSearchResult(int relatedDealNum) {
				// TODO Auto-generated method stub
				mPopupDealShip.setSearchResult(relatedDealNum);
			}
			
			public void checkSortInDbAndRearrange(String date) {
				// TODO Auto-generated method stub
				mSortDealHelper.checkSortInDbAndRearrange(date);
			}
		};
		
		mSearchHelper = new SearchDealHelper(mContext, mapDateToData, mapIdToSearchResult, mWorksAdapter, searchListener);
		mSortDealHelper = new SortDealHelper(noteSortSmsDAO, mapDateToData);
	}

	public void setDate(String date) {
		mWorksAdapter.setCurrentSortPosition(-1);
		mWorksAdapter.setFilter(NameSpace.FILTER_ALL);
		mWorksAdapter.setDate(date);
		mWorksAdapter.notifyDataSetChanged();
		mlvWorks.setSelection(0);
		
		if (!mapDateToData.containsKey(date)) {
			mProgressDialog = ProgressDialog.show(mContext, "", "Loading..", true, true);
			new Thread(new DownloadDataOfDateRunnable(date)).start();
		} else {
			try {
				if (mapDateToData.get(date).getJSONArray(NameSpace.WORK).length() == 0) {
					Tools.toast(mContext, "Không có dữ liệu cho ngày " + date);
				}
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
	}
	
	public void reWork(final JSONObject work) {
		mProgressDialog = ProgressDialog.show(mContext, "", "Loading...");
		new Thread(new Runnable() {
			public void run() {
				// TODO Auto-generated method stub
				try {
					String orderId = work.getString(NameSpace.ORDER_ID);
					String itemType = work.getString(NameSpace.TYPE);
					String apiUrl = String.format(NameSpace.API_REWORK, NameSpace.CLIENT_ID, orderId, itemType);
					final JSONObject apiResponse = (JSONObject) DataService.downloadJsonData(apiUrl, true);
					((Activity)mContext).runOnUiThread(new Runnable() {
						public void run() {
							// TODO Auto-generated method stub
							mProgressDialog.dismiss();
							if (apiResponse!= null) {
								try {
									work.put(NameSpace.RE_WORK, "1");
									mWorksAdapter.notifyDataSetChanged();
								} catch (Exception e) {
									// TODO: handle exception
									e.printStackTrace();
								}
								
							} else {
								Tools.checkInternetAndToast(mContext);
							}
						}
					});
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
			}
		}).start();
	}
	
	// handle filtering
	public void filter(String filter) {
		Log.e("stk", "filter=" + filter);
		
		if (filter.equals(NameSpace.FILTER_SHIP_REWORK)) { // search rework deals of all day
			mWorksAdapter.setWorkViewDisplayMode(NameSpace.WORK_DISPLAY_SEARCH);
			mSearchHelper.isSearchingReworkDeals = true;
			mSearchHelper.search("", NameSpace.SEARCH_ALL, false);
		} else if (filter.startsWith(NameSpace.FILTER_STREET)) {
			mWorksAdapter.setWorkViewDisplayMode(NameSpace.WORK_DISPLAY_DATE);
			mWorksAdapter.setFilter(NameSpace.FILTER_STREET);
			String streetId = filter.split(" ")[1];
			mWorksAdapter.setStreetId(streetId);
			mWorksAdapter.notifyDataSetChanged();
		} else {
			mWorksAdapter.setWorkViewDisplayMode(NameSpace.WORK_DISPLAY_DATE);
			mWorksAdapter.setFilter(filter);
			mWorksAdapter.notifyDataSetChanged();			
		}			
	}
	
	public void onDestroy() {
		mSortDealHelper.saveSort();
		noteSortSmsDAO.close();
		mSearchHelper.executorService.shutdownNow();
	}	
	
	
	
	
	
	
	
	
	
	
	
	
	class DownloadDataOfDateRunnable implements Runnable {
		String date;
		public DownloadDataOfDateRunnable(String date) {
			// TODO Auto-generated constructor stub
			this.date = date;
		}
		
		public void run() {
			// TODO Auto-generated method stub
			String apiUrl = String.format(NameSpace.API_LIST_WORKS, NameSpace.CLIENT_ID, date);
			final JSONObject data = (JSONObject) DataService.downloadJsonData(apiUrl, true);
			
			((Activity) mContext).runOnUiThread(new Runnable() {
				public void run() {
					// TODO Auto-generated method stub
					mProgressDialog.dismiss();
					
					if (data != null) {
						mapDateToData.put(date, data);
						mSortDealHelper.checkSortInDbAndRearrange(date);
						mWorksAdapter.notifyDataSetChanged();
						JSONArray works = data.optJSONArray(NameSpace.WORK);
						if (works != null && works.length() == 0 && !mWorksAdapter.getWorkDisplayMode().equals(NameSpace.WORK_DISPLAY_SEARCH)) {
							Tools.toast(mContext, "Không co�? dữ liệu cho ngày " + date);
						}
					} else {
						Tools.checkInternetAndToast(mContext);
					}
				}
			});				
		}
	}
	
	
	
	
	
	
	

	public class WorksAdapter extends BaseAdapter {
		String date = "";
		String filter = "";
		String streetId;
		int currentSortPosition;
		String workDisplayMode;
		
		public void setDate(String date) {
			this.date = date;
		}

		public String getDate() {
			return date;
		}
		
		public void setFilter(String filter) {
			this.filter = filter;
		}
		
		public void setStreetId(String streetId) {
			this.streetId = streetId;
		}
		
		public void setWorkViewDisplayMode(String workDisplayMode) {
			this.workDisplayMode = workDisplayMode;
		}
		
		public String getWorkDisplayMode() {
			return workDisplayMode;
		}
		
		public void setCurrentSortPosition(int currentSortPosition) {
			this.currentSortPosition = currentSortPosition;
		}
		
		public int getCurrentSortPostion() {
			return currentSortPosition;
		}

		public int getCount() {
			// TODO Auto-generated method stub
			if (workDisplayMode.equals(NameSpace.WORK_DISPLAY_SEARCH)) {
				return mapIdToSearchResult.size();
			} else {
				if (!mapDateToData.containsKey(date)) {
					return 0;
				}

				JSONArray works = mapDateToData.get(date).optJSONArray(NameSpace.WORK);
				if (works != null) {
					return works.length();
				} else {
					return 0;				
				}
			}
		}

		public Object getItem(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		public long getItemId(int position) {
			// TODO Auto-generated method stub
			return position;
		}

		public View getView(int position, View convertView, ViewGroup parent) {
			// TODO Auto-generated method stub

			// set/get holder
			ViewHolder holder;
			if (convertView == null) {
				convertView = mInflater.inflate(R.layout.deal_layout, null);
				holder = new ViewHolder(convertView);
				convertView.setTag(holder);
			} else {
				holder = (ViewHolder) convertView.getTag();
			}

			try {
				/** set data */
				// get work
				String workId;
				final JSONObject work;
				
				if (workDisplayMode.equals(NameSpace.WORK_DISPLAY_SEARCH)) {
					workId = mapIdToSearchResult.keySet().toArray()[position].toString();
					work = mapIdToSearchResult.get(workId);
				} else {
					work = mapDateToData.get(date).getJSONArray(NameSpace.WORK).getJSONObject(position);
					workId = work.getString(NameSpace.ID);
				}				

				// icon : ticket or good
				if (work.getString(NameSpace.TYPE).equals(NameSpace.DEAL_TYPE_TICKET))
					holder.imgOderType.setImageResource(R.drawable.ic_deal_ticket);
				else if (work.getString(NameSpace.TYPE).equals(NameSpace.DEAL_TYPE_GOOD)) {
					holder.imgOderType.setImageResource(R.drawable.ic_deal_good);
				} else if (work.getString(NameSpace.TYPE).equals(NameSpace.DEAL_TYPE_SOLO)) {
					holder.imgOderType.setImageResource(R.drawable.ic_deal_solo);
				}

				// dealId and orderId
				String dealId = work.getString(NameSpace.ITEM_ID);
				String orderId = work.getString(NameSpace.ORDER_ID);
				String dealAndOrDer = mContext.getResources().getString(R.string.deal_and_order);
				holder.tvDealAndOrder.setText(Html.fromHtml(String.format(dealAndOrDer, dealId, orderId)));

				// title
				holder.tvTitle.setText(work.getString(NameSpace.ITEM_TITLE));

				// address
				if (mapOrderIdToAddress.containsKey(workId)) {
					holder.tvAddress.setText(mapOrderIdToAddress.get(workId));
				} else {
					String note = work.getString(NameSpace.NOTE);
					String street = work.getString(NameSpace.STREET);
					String ward = work.getString(NameSpace.WARD);
					String districtId = work.getString(NameSpace.DISTRICT);
					
					String district;
					if (workDisplayMode.equals(NameSpace.WORK_DISPLAY_SEARCH)) {
						district = "";
					} else {
						district = mapDateToData.get(date).getJSONObject(NameSpace.DISTRICT).getString(districtId);
					}

					StringBuilder addressBuilder = new StringBuilder();
					if (!note.equals(""))
						addressBuilder.append(note);
					if (!street.equals(""))
						addressBuilder.append(",").append(street);
					if (!ward.equals(""))
						addressBuilder.append(",").append(ward);
					if (!district.equals(""))
						addressBuilder.append(",").append(district);

					String address = addressBuilder.toString();

					mapOrderIdToAddress.put(workId, address);
					holder.tvAddress.setText(address);
				}
				
				// volume and price
				int volume = Integer.parseInt(work.getString(NameSpace.QUANTITY));
				int price = Integer.parseInt(work.getString(NameSpace.PRICE));
				int feeShip = Integer.parseInt(work.getString(NameSpace.FEE_SHIPPING));
				
				int totalPrice;
				
				String dealType = work.getString(NameSpace.TYPE);
				if (dealType.equals(NameSpace.DEAL_TYPE_SOLO)) {
					totalPrice = price * volume + feeShip;
				} else {
					totalPrice = (price + feeShip) * volume;
				}
				
				String volumeAndPrice = mContext.getResources().getString(R.string.volume_and_price);
				holder.tvVolumeAndPrice.setText(Html.fromHtml(String.format(volumeAndPrice, volume +"", NumberFormat.getInstance().format(totalPrice))));

				
				/** setup button state */
				// btn ship and ship back
				String numShip = work.getString(NameSpace.NUM_SHIP);
				String numReturn = work.getString(NameSpace.NUM_RETURN);
				
				if ((!numShip.equals("0") && !numShip.equals("null")) || (!numReturn.equals("0") && !numReturn.equals("null"))) {
					holder.btnShip.setEnabled(false);
					holder.btnShipBack.setEnabled(false);
					
					if (!numShip.equals("0") && !numShip.equals("null")) {
						holder.btnShip.setImageResource(R.drawable.ic_shipped_normal);
					} else {
						holder.btnShip.setImageResource(R.drawable.bg_btn_ship);
					}
					
					if (!numReturn.equals("0") && !numReturn.equals("null")) {
						holder.btnShipBack.setImageResource(R.drawable.ic_ship_backed);
					} else {
						holder.btnShipBack.setImageResource(R.drawable.bg_btn_ship_back);
					}
				} else {
					holder.btnShip.setEnabled(true);
					holder.btnShipBack.setEnabled(true);
					holder.btnShip.setImageResource(R.drawable.bg_btn_ship);
					holder.btnShipBack.setImageResource(R.drawable.bg_btn_ship_back);
				}
				
				holder.btnShip.setTag(R.id.tag_id, workId);
				holder.btnShip.setTag(R.id.tag_position, position);
				holder.btnShip.setOnClickListener(onClickShipButton);
				
				holder.btnShipBack.setTag(R.id.tag_id, workId);
				holder.btnShipBack.setTag(R.id.tag_position, position);
				holder.btnShipBack.setOnClickListener(onClickShipBackButton);
				
				if (dealType.equals(NameSpace.DEAL_TYPE_TICKET)) {
					holder.btnShipBack.setEnabled(false);
				}
				
				// btn return 
				String status = work.getString(NameSpace.STATUS);
				if (status.equals(NameSpace.DEAL_STATUS_RETURNED)) {
					holder.btnReturn.setImageResource(R.drawable.bg_btn_returned);
					holder.btnReturn.setEnabled(false);
					holder.btnSms.setEnabled(false);
					
					holder.btnShip.setEnabled(false);
					holder.btnShipBack.setEnabled(false);
				} else {
					holder.btnReturn.setImageResource(R.drawable.bg_btn_return);
					holder.btnReturn.setEnabled(true);
					holder.btnSms.setEnabled(true);
				}
				
				holder.btnReturn.setTag(R.id.tag_id, workId);
				holder.btnReturn.setTag(R.id.tag_position, position);
				holder.btnReturn.setOnClickListener(onClickReturnButon);					

				// btn info
				if (work.getString(NameSpace.NOTE_SHIP).equals("")) {
					holder.btnInfo.setImageResource(R.drawable.bg_info_no);
				} else {
					holder.btnInfo.setImageResource(R.drawable.bg_info_yes);
				}

				holder.btnInfo.setTag(R.id.tag_id, workId);
				holder.btnInfo.setTag(R.id.tag_position, position);
				holder.btnInfo.setOnClickListener(onClickInfoButton);

				
				// call button
				holder.layoutCall.setTag(work.getString(NameSpace.PHONE));
				holder.layoutCall.setOnClickListener(onClickCallButton);
				holder.tvPhoneNumber.setText(work.getString(NameSpace.PHONE));

				// sort button
				holder.llSort.setTag(position);
				holder.llSort.setOnClickListener(onClickShowSortLayout);
				
				if (workDisplayMode.equals(NameSpace.WORK_DISPLAY_SEARCH)) {
					holder.llSort.setEnabled(false);
					holder.llSort.setBackgroundColor(mContext.getResources().getColor(R.color.bg_sms_note_pressed));
				} else {
					holder.llSort.setEnabled(true);
					holder.llSort.setBackgroundResource(R.drawable.bg_btn_sms_note);
				}				
				
				if (position == currentSortPosition) {
					holder.rlSort.setVisibility(View.VISIBLE);
				} else {
					holder.rlSort.setVisibility(View.GONE);
				}
				
				holder.tvSort.setText((position+1) + "");
				
				holder.rlSort.setTag(position);
				holder.btnGoUp.setOnClickListener(onClickSortButton);
				holder.btnGoDown.setOnClickListener(onClickSortButton);
				holder.btnGoTop.setOnClickListener(onClickSortButton);
				holder.btnGoBottom.setOnClickListener(onClickSortButton);
				holder.btnGoTo.setOnClickListener(onClickSortButton);
				
				// redo button
				String reWork = work.getString(NameSpace.RE_WORK);
				if (reWork.equals(NameSpace.DEAL_REWORK_YES)) {
					holder.btnRedo.setEnabled(false);
					holder.btnRedo.setCompoundDrawablesWithIntrinsicBounds(R.drawable.arrow_redo_yes, 0, 0, 0);
				} else {
					holder.btnRedo.setEnabled(true);
					holder.btnRedo.setCompoundDrawablesWithIntrinsicBounds(R.drawable.arrow_redo_no, 0, 0, 0);					
				}
				
				holder.btnRedo.setOnClickListener(new OnClickListener() {
					public void onClick(View v) {
						// TODO Auto-generated method stub
						reWork(work);
					}
				});
				
				
				// sms button
				holder.btnSms.setTag(R.id.tag_id, workId);
				holder.btnSms.setTag(R.id.tag_position, position);
				holder.btnSms.setOnClickListener(onClickSmsButton);
				
				if (noteSortSmsDAO.checkSmsExist(orderId)) {
					holder.btnSms.setEnabled(true);
					holder.btnSms.setBackgroundResource(R.drawable.bg_btn_sms_note);
				} else {
					holder.btnSms.setEnabled(false);
					holder.btnSms.setBackgroundColor(mContext.getResources().getColor(R.color.bg_sms_note_pressed));
				}
				
				String streetId = work.getString(NameSpace.STREET_ID_DEAL);
				
				// set visible of this view depend on filter value
				if (filter.equals(NameSpace.FILTER_ALL)
					|| (filter.equals(NameSpace.FILTER_SHIP_NO) && status.equals(NameSpace.DEAL_STATUS_NORMAL))
					|| (filter.equals(NameSpace.FILTER_SHIP_YES) && status.equals(NameSpace.DEAL_STATUS_SHIPPED))
					
					|| (filter.equals(NameSpace.FILTER_TYPE_TICKET) && dealType.equals(NameSpace.DEAL_TYPE_TICKET))
					|| (filter.equals(NameSpace.FILTER_TYPE_GOOD) && dealType.equals(NameSpace.DEAL_TYPE_GOOD))
					|| (filter.equals(NameSpace.FILTER_TYPE_SOLO) && dealType.equals(NameSpace.DEAL_TYPE_SOLO))
					
					|| (filter.equals(NameSpace.FILTER_STREET) && streetId.equals(this.streetId))) {
					convertView.findViewById(R.id.layout_deal_1).setVisibility(View.VISIBLE);
					convertView.findViewById(R.id.layout_deal_2).setVisibility(View.VISIBLE);					
				} else {
					convertView.findViewById(R.id.layout_deal_1).setVisibility(View.GONE);
					convertView.findViewById(R.id.layout_deal_2).setVisibility(View.GONE);					
				}
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}

			convertView.setOnClickListener(onClickConvertView);
			return convertView;
		}

	}

	class ViewHolder {
		ImageView imgOderType, btnShip, btnReturn;
		View rlSort, btnGoTop, btnGoBottom, btnGoUp, btnGoDown, btnGoTo, llSort;
		ImageView btnInfo;
		TextView tvDealAndOrder, tvTitle, tvAddress, tvVolumeAndPrice, tvSort;
		Button btnSms, btnRedo;
		View layoutCall;
		TextView tvPhoneNumber;
		ImageView btnShipBack;
		
		public ViewHolder(View convertView) {
			// TODO Auto-generated constructor stub
			imgOderType = (ImageView) convertView.findViewById(R.id.ic_deal);

			btnShip = (ImageView) convertView.findViewById(R.id.btn_ship);
			btnReturn = (ImageView) convertView.findViewById(R.id.btn_return);
			btnInfo = (ImageView) convertView.findViewById(R.id.ic_info);

			tvDealAndOrder = (TextView) convertView.findViewById(R.id.tv_deal_and_order);
			tvTitle = (TextView) convertView.findViewById(R.id.tv_title);
			tvAddress = (TextView) convertView.findViewById(R.id.tv_address);
			tvVolumeAndPrice = (TextView) convertView.findViewById(R.id.tv_volume_and_price);

			btnSms = (Button) convertView.findViewById(R.id.btn_sms);
			btnRedo = (Button) convertView.findViewById(R.id.btn_redo);
			
			llSort = convertView.findViewById(R.id.ll_sort);
			tvSort = (TextView) convertView.findViewById(R.id.tv_sort);
			
			rlSort = convertView.findViewById(R.id.rl_sort);
			btnGoTop = rlSort.findViewById(R.id.btn_go_top);
			btnGoBottom = rlSort.findViewById(R.id.btn_go_bottom);
			btnGoUp = rlSort.findViewById(R.id.btn_go_up);
			btnGoDown = rlSort.findViewById(R.id.btn_go_down);
			btnGoTo = rlSort.findViewById(R.id.btn_go_to);
			
			layoutCall = convertView.findViewById(R.id.layout_call);
			tvPhoneNumber = (TextView) layoutCall.findViewById(R.id.tv_phone_number);
			
			btnShipBack = (ImageView) convertView.findViewById(R.id.btn_ship_back);
			
		}
		
	}
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	/* ---------------- Listener Implementation ----------------*/
	/* ---------------- Listener Implementation ----------------*/
	/* ---------------- Listener Implementation ----------------*/
	
	// handle showing info of deal
	OnClickListener onClickInfoButton = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			try {
				JSONObject work;
				if (mWorksAdapter.getWorkDisplayMode().equals(NameSpace.WORK_DISPLAY_SEARCH)) {
					String id = (String) v.getTag(R.id.tag_id);
					work = mapIdToSearchResult.get(id);
				} else {
					int position = (Integer) v.getTag(R.id.tag_position);
					work = mapDateToData.get(mWorksAdapter.getDate()).getJSONArray(NameSpace.WORK).getJSONObject(position);
				}
				mPopupDealInfo.setData(work);
				mPopupDealInfo.setAnchor(v);
				mPopupDealInfo.showLikeQuickAction();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
	};

	// handle calling
	OnClickListener onClickCallButton = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			String phoneNumber = (String) v.getTag();
			if (phoneNumber.equals("")) {
				Toast.makeText(mContext, "Không có số điện thoại", Toast.LENGTH_SHORT);
			} else {
				mPopupDealCall.setData(mContext, phoneNumber);
				mPopupDealCall.setAnchor(v);
				mPopupDealCall.showLikeQuickAction();
			}
		}
	};

	// handle shipping
	OnClickListener onClickShipButton = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			try {
				JSONObject work;
				if (mWorksAdapter.getWorkDisplayMode().equals(NameSpace.WORK_DISPLAY_SEARCH)) {
					String id = (String) v.getTag(R.id.tag_id);
					work = mapIdToSearchResult.get(id);
				} else {
					int position = (Integer) v.getTag(R.id.tag_position);
					work = mapDateToData.get(mWorksAdapter.getDate()).getJSONArray(NameSpace.WORK).getJSONObject(position);
				}
				
				String phone = work.getString(NameSpace.PHONE);
				mSearchHelper.search(phone, NameSpace.SEARCH_ALL, true);
				
				mPopupDealShip.setData(work);
				mPopupDealShip.setAnchor(v);
				mPopupDealShip.showLikeQuickAction();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
	};
	
	// handle shipping back deal
	OnClickListener onClickShipBackButton = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			try {
				JSONObject work;
				if (mWorksAdapter.getWorkDisplayMode().equals(NameSpace.WORK_DISPLAY_SEARCH)) {
					String workId = (String) v.getTag(R.id.tag_id);
					work = mapIdToSearchResult.get(workId);
				} else {
					int position = (Integer) v.getTag(R.id.tag_position);
					work = mapDateToData.get(mWorksAdapter.getDate()).getJSONArray(NameSpace.WORK).getJSONObject(position);
				}
				
				mPopupDealShipBack.setData(work);
				mPopupDealShipBack.setAnchor(v);
				mPopupDealShipBack.showLikeQuickAction();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}			
		}
	};
	
	
	// handle showing other deal of the same customer
	OnClickListener onClickShowOtherDealButton = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			mPopupDealShip.dismiss();
			mWorksAdapter.setWorkViewDisplayMode(NameSpace.WORK_DISPLAY_SEARCH);
			mWorksAdapter.notifyDataSetChanged();
			mlvWorks.setSelection(0);
		}
	};

	// hander returning
	OnClickListener onClickReturnButon = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			try {
				JSONObject work;
				if (mWorksAdapter.getWorkDisplayMode().equals(NameSpace.WORK_DISPLAY_SEARCH)) {
					String id = (String) v.getTag(R.id.tag_id);
					work = mapIdToSearchResult.get(id);
				} else {
					int position = (Integer) v.getTag(R.id.tag_position);
					work = mapDateToData.get(mWorksAdapter.getDate()).getJSONArray(NameSpace.WORK).getJSONObject(position);
				}
				
				mPopupDealReturn.setData(work);
				mPopupDealReturn.setAnchor(v);
				mPopupDealReturn.showLikeQuickAction();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}
		}
	};
	
	// handle sorting
	OnClickListener onClickShowSortLayout = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
//			currentSortPosition = (Integer) v.getTag();
			mWorksAdapter.setCurrentSortPosition((Integer)v.getTag());
			mWorksAdapter.notifyDataSetChanged();			
		}
	};

	OnClickListener onClickSortButton = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			int position = (Integer) ((View) v.getParent()).getTag();
			switch (v.getId()) {
			case R.id.btn_go_up:
				if (position - 1 >= 0) {
					sort(position, position - 1);
				}
				break;
			case R.id.btn_go_down:
				if (position < mWorksAdapter.getCount() - 1) {
					sort(position, position + 1);				
				}
				break;
			case R.id.btn_go_top:
				sort(position, 0);
				break;
			case R.id.btn_go_bottom:
				sort(position, mWorksAdapter.getCount() - 1);
				break;
			case R.id.btn_go_to:
				mPopupDealGoTo.setData(mWorksAdapter.getCurrentSortPostion(), mWorksAdapter.getCount()-1);
				mPopupDealGoTo.setAnchor(v);
				mPopupDealGoTo.showLikeQuickAction();				
				break;				
			default:
				break;
			}
			
		}
	};
	
	OnClickListener onClickSortBySelectPosition = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			mPopupDealGoTo.dismiss();
			if (v.getId() == R.id.btn_cancel) return;
			int newPos = (Integer) v.getTag();
			if (newPos == -1) {
				Toast.makeText(mContext, "Hãy nhập vị trí", Toast.LENGTH_SHORT).show();
			} else {
				sort(mWorksAdapter.getCurrentSortPostion(), newPos);
			}
		}
	};

	public void sort(int oldPos, final int newPos) {
		try {
			mWorksAdapter.setCurrentSortPosition(newPos);
			
			// if exchange two deals which one is right before/afer the other
			if (Math.abs(oldPos - newPos) == 1) {
				JSONArray works = mapDateToData.get(mWorksAdapter.getDate()).getJSONArray(NameSpace.WORK);
				JSONObject oldWork = works.getJSONObject(oldPos);
				JSONObject newWork = works.getJSONObject(newPos);
				
				works.put(oldPos, newWork);
				works.put(newPos, oldWork);
			} else {
				JSONArray works = mapDateToData.get(mWorksAdapter.getDate()).getJSONArray(NameSpace.WORK);
				JSONArray worksNew = new JSONArray();
				
				int position1 = oldPos;
				int position2 = newPos;
				
				if (position1 < position2) {
					// get objects from 0 to position2, except object at position1
					for (int i = 0; i <= position2; i++) {
						if (i != position1) worksNew.put(works.getJSONObject(i));
					}
					// add object position1 to new array
					worksNew.put(works.getJSONObject(position1));
					
					// add object from position 2 to last
					for (int i = position2+1 ; i < works.length(); i++) {
						worksNew.put(works.getJSONObject(i));
					}					
				} else if (position1 > position2) {
					// get object from 0 to position2 - 1
					for (int i = 0; i < position2; i++) {
						worksNew.put(works.getJSONObject(i));
					}
					
					// add object position1 to new array
					worksNew.put(works.getJSONObject(position1));
					
					// get object from position2 to end, except at position1
					for (int i = position2; i < works.length(); i++) {
						if (i != position1) worksNew.put(works.getJSONObject(i));
					}
				}
				
				// assign new works to data of current date
				mapDateToData.get(mWorksAdapter.getDate()).put(NameSpace.WORK, worksNew);
			}
			
			mWorksAdapter.notifyDataSetChanged();
			
			if (newPos == 0 || newPos == mWorksAdapter.getCount() - 1)
				mlvWorks.setSelection(newPos);
			else
				mlvWorks.smoothScrollToPosition(newPos);
			
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}
	
	OnClickListener onClickSmsButton = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			try {
				JSONObject work;
				if (mWorksAdapter.getWorkDisplayMode().equals(NameSpace.WORK_DISPLAY_SEARCH)) {
					String id = (String) v.getTag(R.id.tag_id);
					work = mapIdToSearchResult.get(id);
				} else {
					int position = (Integer) v.getTag(R.id.tag_position);
					work = mapDateToData.get(mWorksAdapter.getDate()).getJSONArray(NameSpace.WORK).getJSONObject(position);
				}
				
				mPopupDealSms.setData(work);
				mPopupDealSms.setAnchor(v);
				mPopupDealSms.showLikeQuickAction();
			} catch (Exception e) {
				// TODO: handle exception
				e.printStackTrace();
			}			
		}
	};
	
	OnClickListener onClickConvertView = new OnClickListener() {
		public void onClick(View v) {
			// TODO Auto-generated method stub
			if (mWorksAdapter.getCurrentSortPostion() != -1) {
				mWorksAdapter.setCurrentSortPosition(-1);
				mWorksAdapter.notifyDataSetChanged();
			}
		}
	};

}
