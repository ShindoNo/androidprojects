package vn.muachung.cod.popup;

import java.text.NumberFormat;
import org.example.qberticus.quickactions.BetterPopupWindow;
import org.json.JSONObject;

import vn.muachung.cod.dao.NoteSortSmsDAO;
import vn.muachung.cod.muachungmobile.WorksViewCreator;
import vn.muachung.cod.muachungmobile.WorksViewCreator.WorksAdapter;
import vn.muachung.cod.query.DataService;
import vn.muachung.cod.query.NameSpace;
import vn.muachung.cod.query.Tools;

import vn.muachung.cod.muachungmobile.R;

import android.app.Activity;
import android.app.AlertDialog;
import android.app.AlertDialog.Builder;
import android.app.ProgressDialog;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.provider.Settings;
import android.text.Editable;
import android.text.TextWatcher;
import android.util.Log;
import android.view.LayoutInflater;
import android.view.View;
import android.view.View.OnClickListener;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class PopupDealShip extends BetterPopupWindow implements OnClickListener {

	Context mContext;
	ProgressDialog mProgressDialog;

	View popupView, btnUpdate, pbLoading;
	Button btnShowOtherDeal;
	TextView tvVolume, tvReturn, tvPrice;
	EditText etShipNum;

	OnClickListener mOnClickShowOtherDealListener;
	WorksAdapter worksAdapter;
	WorksViewCreator worksViewCreator;

	NoteSortSmsDAO mNoteSortSmsDAO;
	JSONObject mWork;
	int quantity, price, fee, totalPrice;
	String mDealType;

	int currentLatitude = 0;
	int currentLongitude = 0;

	public PopupDealShip(View anchor) {
		super(anchor);
		// TODO Auto-generated constructor stub
	}

	/**
	 * Set layout and listeners here
	 */
	@Override
	protected void onCreate() {
		// TODO Auto-generated method stub
		mContext = anchor.getContext();
		LayoutInflater inflater = LayoutInflater.from(anchor.getContext());
		popupView = inflater.inflate(R.layout.popup_deal_ship, null);
		tvVolume = (TextView) popupView.findViewById(R.id.tv_volume);
		etShipNum = (EditText) popupView.findViewById(R.id.et_ship_num);
		tvReturn = (TextView) popupView.findViewById(R.id.tv_return);
		tvPrice = (TextView) popupView.findViewById(R.id.tv_price);
		btnUpdate = popupView.findViewById(R.id.btn_update);
		btnShowOtherDeal = (Button) popupView.findViewById(R.id.btn_show_other_deal);
		pbLoading = popupView.findViewById(R.id.pb_loading);
		setContentView(popupView);
		setupLocationListener();
	}

	public void setupLocationListener() {
		LocationListener locationListener = new LocationListener() {
			public void onStatusChanged(String provider, int status, Bundle extras) {}

			public void onProviderEnabled(String provider) {}

			public void onProviderDisabled(String provider) {}

			public void onLocationChanged(Location location) {
				// TODO Auto-generated method stub
				currentLatitude = (int) (location.getLatitude() * 1E6);
				currentLongitude = (int) (location.getLongitude() * 1E6);
			}
		};

		LocationManager locationManager = (LocationManager) mContext.getSystemService(Context.LOCATION_SERVICE);
		locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
		locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);
	}

	public void setData(JSONObject work) {
		mWork = work;
	}

	public void setDAO(NoteSortSmsDAO noteSortSmsDAO) {
		mNoteSortSmsDAO = noteSortSmsDAO;
	}

	public void setAdapter(WorksAdapter adapter) {
		worksAdapter = adapter;
	}

	public void setWorkViewCreator(WorksViewCreator w) {
		worksViewCreator = w;
	}

	public void setShowOtherDealListener(OnClickListener onClickShowOtherDealListener) {
		mOnClickShowOtherDealListener = onClickShowOtherDealListener;
	}

	/**
	 * Set data on view before showing
	 */
	@Override
	protected void onShow() {
		// TODO Auto-generated method stub
		try {
			// get data
			quantity = Integer.parseInt(mWork.getString(NameSpace.QUANTITY));
			price = Integer.parseInt(mWork.getString(NameSpace.PRICE));
			fee = Integer.parseInt(mWork.getString(NameSpace.FEE_SHIPPING));

			mDealType = mWork.getString(NameSpace.TYPE);
			if (mDealType.equals(NameSpace.DEAL_TYPE_SOLO)) {
				totalPrice = price * quantity + fee;
			} else {
				totalPrice = (price + fee) * quantity;
			}

			tvVolume.setText(quantity + "");
			etShipNum.setText(quantity + "");
			etShipNum.setSelection(etShipNum.getText().length());
			etShipNum.addTextChangedListener(onShipNumChange);
			tvReturn.setText("0");
			tvPrice.setText(NumberFormat.getInstance().format(totalPrice));
			btnUpdate.setOnClickListener(this);

			btnShowOtherDeal.setTag(mWork.getString(NameSpace.ORDER_ID));
			btnShowOtherDeal.setOnClickListener(mOnClickShowOtherDealListener);

			pbLoading.setVisibility(View.VISIBLE);
			btnShowOtherDeal.setVisibility(View.GONE);
		} catch (Exception e) {
			// TODO: handle exception
			e.printStackTrace();
		}
	}

	boolean flag;

	TextWatcher onShipNumChange = new TextWatcher() {
		public void onTextChanged(CharSequence s, int start, int before, int count) {
		}

		public void beforeTextChanged(CharSequence s, int start, int count, int after) {
		}

		public void afterTextChanged(Editable s) {
			// TODO Auto-generated method stub
			if (s.length() == 0)
				return;
			int edittedShipNum = Integer.parseInt(s.toString());

			if (flag) {
				flag = false;
				return;
			}

			if (edittedShipNum == 0) {
				flag = true;
				Toast.makeText(mContext, "Số lượng phải > 0", Toast.LENGTH_SHORT).show();
				etShipNum.setText(quantity + "");
				etShipNum.setSelection(etShipNum.getText().length());
			} else if (edittedShipNum > quantity) {
				flag = true;
				Toast.makeText(mContext, "Số lượng phải <= " + quantity, Toast.LENGTH_SHORT).show();
				etShipNum.setText(quantity + "");
				etShipNum.setSelection(etShipNum.getText().length());
			} else {
				tvReturn.setText((quantity - edittedShipNum) + "");
				int returnNum = quantity - edittedShipNum;

				int returnPrice;
				if (mDealType.equals(NameSpace.DEAL_TYPE_SOLO)) {
					returnPrice = returnNum * price;
				} else {
					returnPrice = returnNum * (price + fee);
				}

				int priceMustPay = totalPrice - returnPrice;
				tvPrice.setText(NumberFormat.getInstance().format(priceMustPay));
			}
		}
	};

	public void onClick(final View v) {
		// TODO Auto-generated method stub
		if (v.getId() == R.id.btn_update) {
			if (etShipNum.length() == 0) {
				Tools.toast(mContext, "Chưa nhập số lượng");
				return;
			}

			if (currentLatitude == 0 || currentLongitude == 0) {
				AlertDialog.Builder builder = new Builder(mContext);
				builder.setMessage("Chưa lấy được t�?a độ. Kiểm tra GPS/Network?");
				builder.setPositiveButton("OK", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						mContext.startActivity(new Intent(Settings.ACTION_LOCATION_SOURCE_SETTINGS));
					}
				});

				builder.setNegativeButton("Giao hàng luôn", new DialogInterface.OnClickListener() {
					public void onClick(DialogInterface dialog, int which) {
						// TODO Auto-generated method stub
						ship();
					}
				});
				builder.create().show();
			} else {
				ship();
			}
		}
	}

	public void ship() {
		mProgressDialog = ProgressDialog.show(mContext, "", "Loading..", true, true);
		mProgressDialog.setCancelable(false);
		dismiss();
		new Thread(new Runnable() {
			public void run() {
				// TODO Auto-generated method stub
				// http://api.muachung.vn/1.0/workUpdate.json?client_id=eabd001c45c9c66a1d485a98a55db27c&orderID=3101817&num_ship=3
				try {
					final String orderId = mWork.getString(NameSpace.ORDER_ID);
					final String numShip = etShipNum.getText().toString();
					final String numReturn = (quantity - Integer.parseInt(numShip)) + "";
					
					Log.e("stk", "numship=" + numShip + "; numreturn =" + numReturn);
					
					String type = mWork.getString(NameSpace.TYPE);
					String apiUrl = String.format(NameSpace.API_SHIP, NameSpace.CLIENT_ID, orderId, type, numShip, currentLongitude, currentLatitude);
					final JSONObject apiResponse = (JSONObject) DataService.downloadJsonData(apiUrl, true);

					((Activity) mContext).runOnUiThread(new Runnable() {
						public void run() {
							// TODO Auto-generated method stub
							try {
								mProgressDialog.dismiss();
								if (apiResponse != null) {
									String error = apiResponse.getString(NameSpace.ERROR);
									if (error.equals("0")) { // if no error, edit data and notify dataset changed
										mWork.put(NameSpace.STATUS, "1"); // change status of deal
										mWork.put(NameSpace.NUM_SHIP, numShip);
										mWork.put(NameSpace.NUM_RETURN, numReturn);
										worksAdapter.notifyDataSetChanged();
										JSONObject smsObject = apiResponse.optJSONObject(NameSpace.SMS); // if has sms
										if (smsObject != null) {
											mNoteSortSmsDAO.insertSms(orderId, smsObject.toString()); // save in sqlite
										}
										Tools.toast(mContext, "Giao hàng thành công");
									} else {
										Tools.toast(mContext, "Giao hàng lỗi");
									}
								} else {
									Tools.checkInternetAndToast(mContext);
								}
							} catch (Exception e) {
								// TODO: handle exception
								e.printStackTrace();
							}
						}
					});
				} catch (Exception e) {
					// TODO: handle exception
					e.printStackTrace();
				}
			}
		}).start();
	}

	public void setSearchResult(int numberOfFoundResult) {
		pbLoading.setVisibility(View.GONE);
		if (numberOfFoundResult > 0) {
			btnShowOtherDeal.setVisibility(View.VISIBLE);
			btnShowOtherDeal.setText("Có " + numberOfFoundResult + " deal khác của khách hàng này");
		}
	}

}
